{"./":{"url":"./","title":"Introduction","keywords":"","body":"Introduction ROS学习记录ROS版本：Kinetic系统：Ubuntu16.04 © 黄文庆 all right reserved，powered by Gitbook文件修订时间： 2020-05-07 15:58:05 "},"Chapter1/Introduction.html":{"url":"Chapter1/Introduction.html","title":"第一章 ROS基础搭建","keywords":"","body":"Chapter 1 Introduction 本章主要记录ROS的安装和配置过程 © 黄文庆 all right reserved，powered by Gitbook文件修订时间： 2020-05-07 15:58:05 "},"Chapter1/ROS安装.html":{"url":"Chapter1/ROS安装.html","title":"第一篇 ROS安装","keywords":"","body":"第一篇 ROS 安装 在安装之前，先要配置好Ubuntu的系统环境 打开System Settings -> Software & updates -> ubuntu software，全部都勾选,如图所示: 更改源为中国科学技术大学的镜像源 (使用国内的Ubuntu镜像源下载速度会更快些)，如图所示: 添加 sources.list(添加镜像源：科大源)sudo sh -c '. /etc/lsb-release && echo \"deb http://mirrors.ustc.edu.cn/ros/ubuntu/ `lsb_release -cs` main\" > /etc/apt/sources.list.d/ros-latest.list' ⑴. 点击下图红框中的链接，进入： ⑵. 粘贴下图的命令Command即可。 添加 Keys(公钥是Ubuntu的一种安全机制，也是ROS安装不可缺少的一步，第1步勾选的目的就是这个)sudo apt-key adv --keyserver 'hkp://keyserver.ubuntu.com:80' --recv-key C1CF6E31E6BADE8868B172B4F42ED6FBAB17C654 执行系统更新，更新源列表, 确保获得的ROS软件是最新的sudo apt update sudo apt upgrade 安装ROS包 ROS中有很多函数库和工具，官网提供了四种默认的安装方式，当然也可以单独安装某个特定的软件包。这四种方式包括桌面完整版安装、桌面版安装，基础版安装、单独软件包安装。推荐安装桌面完整版安装（包含ROS、rqt、rviz、通用机器人函数库、2D/3D仿真器、导航以及2D/3D感知功能），如下： 安装Kinetic版本的ROS(desktop-full : 桌面完整版)sudo apt-get install ros-kinetic-desktop-full 如果你不想安装桌面完整版，你还可以尝试以下三种方式安装： 桌面版安装（包含ROS、rqt、rviz以及通用机器人函数库）sudo apt-get install ros-kinetic-desktop 基础版安装（包含ROS核心软件包、构建工具以及通信相关的程序库，无GUI工具）sudo apt-get install ros-kinetic-ros-base 单独软件包安装（这种安装方式在运行ROS缺少某些package依赖时会经常用到。你可以安装某个指定的ROS软件包,使用软件包名称替换掉下面的PACKAGE）sudo apt-get install ros-kinetic-PACKAGE 例如系统提示找不到slam-gmapping，你就可以：sudo apt-get install ros-kinetic-slam-gmapping 要查找可用的软件包，请运行：apt-cache search ros-kinetic © 黄文庆 all right reserved，powered by Gitbook文件修订时间： 2020-05-07 15:58:05 "},"Chapter1/ROS配置.html":{"url":"Chapter1/ROS配置.html","title":"第二篇 ROS配置","keywords":"","body":"第二篇 ROS配置 ROS安装完成之后，我们还需要在自己电脑上对ROS进行一些参数的配置，使ROS能够正常工作。就像我们刚买到新手机一样，在开始使用之前，必须要做一些配置操作。 配置环境变量echo \"source /opt/ros/kinetic/setup.bash\" >> ~/.bashrc source ~/.bashrc 如果不配置，我们每打开新的终端terminal时，每次都要配置一次ROS的环境，不然ROS的命令不能正常使用。相反，将ROS环境变量添加到～/.bashrc文件中之后，我们每打开新的终端terminal时，系统每次都会自动把ROS环境变量配置好，ROS的命令就可以直接使用，很方便。 到目前为止，我们已经安装了运行核心ROS软件包所需的软件。为了创建和管理自己的ROS工作空间，我们还需要安装rosinstall工具，以及其依赖包：sudo apt install python-rosdep python-rosinstall python-rosinstall-generator python-wstool build-essential rosinstall是ROS中一个独立的命令行工具包。通过一条命令就可以下载ROS的许多源代码。 初始化 rosdep sudo rosdep init 在使用ROS支持的工具或命令之前，需要初始化ROS。rosdep init会自动初始化ROS，并安装ROS运行必需的依赖文件。 更新 updaterosdep update 紧跟着就 update，更新此版本的ROS到最新的状态。并且不用sudo切换到管理员权限 至此，我们就完成了ROS的安装和配置工作，接下来就测试一下ROS能否正常工作吧。 首先启动ROS，运行 roscoreroscore 终端输出结果如图，就说明ROS能正常 启动： 然后运行ROS的吉祥物-小海龟，测试ROS的运行是否正常 重新打开一个新的终端，输入： rosrun turtlesim turtlesim_node 你就可以看到弹出一个新的窗口界面，一只小海龟出现在窗口里 　　　　　　 怎么操控这个小海龟呢？我们再重新打开一个终端，启动按键控制程序，输入命令： rosrun turtlesim turtle_teleop_key 接下来，我们运行在这个终端里，并通过键盘上的方向键，就可以控制小海龟的运动了。 至此，经过了上面的测试，ROS的安装、配置工作就已经全部完成了。 下面就可以正式开启ROS的学习之旅～～～ © 黄文庆 all right reserved，powered by Gitbook文件修订时间： 2020-05-07 15:58:05 "},"Chapter1/小结.html":{"url":"Chapter1/小结.html","title":"小结篇","keywords":"","body":"Chpaer 1 小结 在第一章的学习过程中，我们主要是完成了ROS的安装工作，工欲善其事，必先利其器。在学习的过程中，也是遇到了一些问题，对于还没入门的我来说，有的问题反复出现，解决的时间也很长。在此记录下来，以备日后查看。 第一章遇到的问题大都跟网络有关系，挂vpn可能会解决问题 1. 执行命令 sudo rosdep init出错 问题如图所示：　　　　 解决方法：这个问题的原因是raw.githubusercontent.com域名解释被污染了（你懂的...）。解决方法是到ipaddress.com上查询raw.githubusercontent.com的ip地址，然后在ubuntu的/etc/hosts文件上面加入这条域名解释就行了sudo vim /etc/hosts 注：查询到的IP地址不一定是下图所示 　　 2. 执行命令 rosdep update出错 问题如图所示：　　　 解决方法：主要是网络访问不稳定，只有多来几次。或者换成手机热点多试几次。 © 黄文庆 all right reserved，powered by Gitbook文件修订时间： 2020-05-07 15:58:05 "},"Chapter2/Introduction.html":{"url":"Chapter2/Introduction.html","title":"第二章 ROS学习基础","keywords":"","body":"Chapter 2 Introduction 本章开始正式学习ROS所用到的学习参考资料有：ROS-Academy-for-Beginners © 黄文庆 all right reserved，powered by Gitbook文件修订时间： 2020-05-07 15:58:05 "},"Chapter2/安装ROS-Beginners教学包.html":{"url":"Chapter2/安装ROS-Beginners教学包.html","title":"第一篇 资料源码下载","keywords":"","body":"安装ROS-Academy-for-Beginners教学包 这是我找到的算是比较系统的学习ROS入门的资料，目前关于ROS基础的学习资料比较少，所以网上资料也比较零散。我参考的这份学习资料对于我这个还没入门的人来说，很珍贵。所以我基本上参考这份资料进行学习，并记录自己在学习过程中遇到的问题和解决方法。 下载git因为我们需要从github上下载源代码，所以需要先安装git工具。ubuntu系统一般会自带git。sudo apt install git 然后，创建一个文件夹,作为ROS的工作空间workspace，名称随意，我这里命名为tutorial_ws mkdir tutorial_ws 并且在tutorial_ws文件夹下再创建一个子文件夹，这个子文件夹的名称不是随意的了，必须为srccd tutorial_ws mkdir src 接下来克隆github上的教学包代码到本地的src文件夹里 cd tutorial_ws/src git clone https://github.com/DroidAITech/ROS-Academy-for-Beginners.git 教学代码包还需要一些依赖文件，所以接下来就安装依赖文件 cd tutorial_ws rosdep install --from-paths src --ignore-src --rosdistro=kinetic -y 注：以上命令很重要，缺少依赖将导致教学包无法正常编译和运行 在开始编译教学代码之前，还需要确保安装的gazebo版本在7.0及7.0以上 使用指令查看一下 gazebo -v 如果你的gazebo版本低于7.0，则需要升级 sudo sh -c 'echo \"deb http://packages.osrfoundation.org/gazebo/ubuntu-stable `lsb_release -cs` main\" > /etc/apt/sources.list.d/gazebo-stable.list' wget http://packages.osrfoundation.org/gazebo.key -O - | sudo apt-key add - sudo apt-get update sudo apt-get install gazebo7 注：最后一行命令最好还是下载 gazebo7，更高版本可能会有其他问题 准备工作已经完成了，现在可以编译教学代码了 cd ~/tutorial_ws catkin_make source ~/tutorial_ws/devel/setup.bash 注：每一次使用catkin_make编译完成后，必须使用 source 命令刷新一下工作空间的环境，否则可能找不到工作空间。 许多时候我们为了打开终端就能够运行工作空间中编译好的ROS程序，我们习惯把source ~/tutorial_ws/devel/setup.bash命令追加到~/.bashrc文件中(tutorial_ws替换为你自己的工作空间名称)。这样每次打开终端，系统就会自动刷新工作空间环境了。你可以通过echo \"source ~/tutorial_ws/devel/setup.bash\" >> ~/.bashrc 命令来添加。 编译成功之后，就可以运行本教学配套的仿真程序了 输入命令：roslaunch robot_sim_demo robot_spawn.launch 你会看到仿真画面启动，仿真界面中包括了软件博物馆和Xbot机器人模型。注：第一次启动gazebo仿真软件，会比较慢，需要耐心等待一下。 另外打开一个终端，输入命令：rosrun robot_sim_demo robot_keyboard_teleop.py 将会打开键盘控制程序，可以控制机器人移动。 聚焦键盘控制终端窗口，按下I，J,L等按键，这样就通过键盘控制机器人移动了。 当完成了上面7个步骤之后，不知不觉中，我们就已经完成了ROS中最常见的 源码下载->安装依赖->编译->运行 的流程了。在ROS社区有许许多多这样的软件代码包，基本都按照这样的流程来运行。相信你一定可以举一反三。 © 黄文庆 all right reserved，powered by Gitbook文件修订时间： 2020-05-07 16:13:58 "},"Chapter2/二进制vs源码安装.html":{"url":"Chapter2/二进制vs源码安装.html","title":"第二篇 二进制vs源码安装","keywords":"","body":"二进制安装 vs 源代码安装 1. 二进制包与源代码包 我们通过apt方式安装了ROS系统以及相关的软件包，我们也通过下载源码的方式编译安装了一个ROS教学代码包。这是两种常见的软件包安装方式，通常我们的软件包(Package)就可以分为二进制和源代码。 二进制包里面包括了已经编译完成，可以直接运行的程序。通过 sudo apt-get install 来进行下载和解包（安装），执行完该指令后就可以马上使用了。因此这种方式简单快捷，适合比较固定、无需改动的程序。 而源代码包里是程序的原始代码，下载到你的计算机上必须经过编译，生成可执行的二进制文件之后，方可运行。一些个人开发的程序、第三方修改或者你希望修改的程序都应当通过源代码包的来编译安装。 区别 二进制包 源代码包 下载方式 apt-get install/直接下载deb git clone/直接下载源代码 ROS包存放位置 /opt/ros/kinetic/ 通常~/tutorial_ws/src 编译方式 无需编译 通过make/cmake/caktin_make 来源 官方apt软件源 开源项目、第三方开发者 扩展性 无法修改 通过源代码修改 可读性 无法查看源代码 方便阅读源代码 优点 下载简单，安装方便 源码可修改，便于定制功能 缺点 无法修改 编译工具、软件包依赖、版本和参数 应用场景 基础软件 需要查看、开发和修改的程序 我们用apt-get安装了ROS及其组件，因此我们不需要编译就可以运行turtlesim程序。对于这些程序，除非我们做操作系统的设计开发才会去下载源码，否则直接用官方提供的ROS软件包；而ROS-Academy-for-Beginners以源码呈现，你可以看到每个demo下面的C++源代码。对于这些源文件我们必须caktin_make编译，然后才能运行。 2. ROS二进制包的安装 在ROS中，我们可能经常会遇到缺少相关的ROS依赖的问题。有些时候你编译或者运行一些ROS程序，系统会提示找不到XXX功能包，如图所示。遇到这样的问题，请先注意阅读错误原因，看看是否有解决方法，也可以Google一下。如果是缺少ROS的依赖，通常可以用以下命令来安装： sudo apt-get install ros-kinetic-PACAKGE 将PACKAGE替换为系统提示缺少的软件包，例如 sudo apt-get install ros-kinetic-slam-gmapping #GMapping-SLAM算法包 sudo apt-get install ros-kinetic-turtlebot-description #Turtlebot机器人模型包 注：所有APT官方中的ROS功能包都是按照 ros- 的形式来命名的。 © 黄文庆 all right reserved，powered by Gitbook文件修订时间： 2020-05-07 15:58:05 "},"Chapter2/安装RoboWareStudio.html":{"url":"Chapter2/安装RoboWareStudio.html","title":"第三篇 安装RoboWare Studio","keywords":"","body":"安装 RoboWare Studio 通常ROS的程序都是用C++和Python开发的，为了提高开发的效率，我们建议用IDE来写代码。目前在Ubuntu上已经有许多IDE支持ROS开发，比如Eclipse、Qt Creator。不过这些IDE配置起来会比较麻烦，我们推荐一款适配ROS的IDE——RoboWare Studio来开发ROS。 RoboWare Studio现在官网已经不存在了，在2018年就不再维护更新了。这个软件是开源的，我们还是可以继续使用的。 我保存了RoboWare Studio的最后一个更新版本和中英文软件使用手册。可以访问我的github仓库地址，进行下载使用。 micro-coder/RoboWare_Studio_1.2.0 © 黄文庆 all right reserved，powered by Gitbook文件修订时间： 2020-05-07 15:58:05 "},"Chapter2/小结.html":{"url":"Chapter2/小结.html","title":"小结篇","keywords":"","body":"Chpaer 2 小结 © 黄文庆 all right reserved，powered by Gitbook文件修订时间： 2020-05-07 15:58:05 "}}